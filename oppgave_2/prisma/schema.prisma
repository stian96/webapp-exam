generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model ExampleTable {
  id   String @id @default(uuid())
  col1 String
  col2 String
  col3 String
}

model Performers {
  id                     String            @id @default(uuid())
  userId                 String            @unique
  gender                 String
  sport                  String
  heartRate              Int
  watt                   Int
  speed                  Int
  uniqueSessionTemplates Sessions[]
  sessionActivities      SessionActivity[]
  performerGoals         PerformerGoals[]
}

model Goals {
  id                 String            @id @default(uuid())
  name               String?
  date               DateTime?
  comment            String?
  isCompetition      Boolean
  goalCompetition    Int?
  goalNotCompetition String?
  location           String?
  type               String?
  priority           Int?
  sessionActivities  SessionActivity[]
  performerGoals     PerformerGoals[]
}

model Questions {
  id               String             @id @default(uuid())
  question         String
  type             String
  answers          Answers[]
  sessionQuestions SessionQuestions[]
}

model Answers {
  id            String          @id @default(uuid())
  question      Questions       @relation(fields: [questionId], references: [id])
  questionId    String
  answerText    String?
  answerNumber  Int?
  answerEmoji   String?
  reportAnswers ReportAnswers[]
}

model Intervals {
  id               String             @id @default(uuid())
  duration         Int
  intensity        Int
  intervalResults  IntervalResults[]
  sessionIntervals SessionIntervals[]
}

model IntervalResults {
  id                   String                  @id @default(uuid())
  interval             Intervals               @relation(fields: [intervalId], references: [id])
  intervalId           String
  duration             Int
  intensityMin         Int
  intensityMax         Int
  intensityAvg         Int
  pulseMin             Int
  pulseMax             Int
  pulseAvg             Int
  speedMin             Int
  speedMax             Int
  speedAvg             Int
  wattMin              Int
  wattMax              Int
  wattAvg              Int
  reportIntervalResult ReportIntervalResults[]
}

model Sessions {
  id                String             @id @default(uuid())
  name              String?
  type              String?
  isTemplate        Boolean
  uniqueToPerformer Performers?        @relation(fields: [performerId], references: [id], onDelete: Cascade)
  performerId       String?
  slug              String?            @unique
  intensityParam    Int?
  wattParam         Int?
  speedParam        Int?
  pulseParam        Int?
  sessionActivities SessionActivity[]
  sessionQuestions  SessionQuestions[]
  SessionIntervals  SessionIntervals[]
  sessionTags       SessionTags[]
}

model SessionActivity {
  id          String     @id @default(uuid())
  date        DateTime
  session     Sessions   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   String
  goal        Goals?     @relation(fields: [goalId], references: [id])
  goalId      String?
  performer   Performers @relation(fields: [performerId], references: [id])
  performerId String
  report      Reports?
}

model Reports {
  id                    String                  @id @default(uuid())
  sessionActivity       SessionActivity         @relation(fields: [sessionActivityId], references: [id], onDelete: Cascade)
  sessionActivityId     String                  @unique
  reportIntervalResults ReportIntervalResults[]
  reportAnswers         ReportAnswers[]
}

model PerformerGoals {
  performer   Performers @relation(fields: [performerId], references: [id])
  performerId String
  goal        Goals      @relation(fields: [goalId], references: [id])
  goalId      String
  year        Int

  @@id([performerId, goalId, year])
}

model SessionQuestions {
  session    Sessions  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId  String
  question   Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  @@id([sessionId, questionId])
}

model SessionIntervals {
  session    Sessions  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId  String
  interval   Intervals @relation(fields: [intervalId], references: [id], onDelete: Cascade)
  intervalId String

  @@id([sessionId, intervalId])
}

model SessionTags {
  session   Sessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  tag       String

  @@id([sessionId, tag])
}

model ReportIntervalResults {
  report           Reports         @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId         String
  intervalResult   IntervalResults @relation(fields: [intervalResultId], references: [id], onDelete: Cascade)
  intervalResultId String

  @@id([reportId, intervalResultId])
}

model ReportAnswers {
  report   Reports @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String
  answer   Answers @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId String

  @@id([reportId, answerId])
}
